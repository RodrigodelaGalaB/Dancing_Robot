#include <stdint.h>
#include "tm4c123gh6pm.h"

//ECHO (PB6) I
//TRIGGER (PA4) O

/*
 * Esta librería cuenta con las funciones necesarias para emplear el dispositivo de ultrasonido
 * HC SR04 con el módulo tm4c123gh6pm. Habilita el timer de recepción de la señal eco del ultrasonido
 * y manda señales periódicas de 10 microsegundos al dispositivo como se específica en el datasheet.
 */


//Función que espera una cantidad de microsegundos
void delay_microseconds (uint32_t micro){
    NVIC_ST_CTRL_R |= ~0x01;
    NVIC_ST_RELOAD_R = (NVIC_ST_RELOAD_R & ~0xFFFFFF) + 15;
    NVIC_ST_CURRENT_R = 0;
    NVIC_ST_CTRL_R = (NVIC_ST_CTRL_R & ~0x7) + 5;

    while ((NVIC_ST_CTRL_R & (1<<16)) == 0);
}
//fin del systick


//Programación del timer que analiza las señales emitidas por el sensor de ultrasonido
void Timer0_Init (void) {
    SYSCTL_RCGCTIMER_R |=(1<<0);
    SYSCTL_RCGCGPIO_R |=(1<<1);
    GPIO_PORTB_DIR_R &= ~(1<<6);
    GPIO_PORTB_DEN_R |= (1<<6);
    GPIO_PORTB_AFSEL_R |= (1<<6);
    GPIO_PORTB_PCTL_R &= ~0x0F000000;
    GPIO_PORTB_PCTL_R |= 0x07000000;
    TIMER0_CTL_R &= ~1;
    TIMER0_CFG_R = 4;
    TIMER0_TAMR_R = 0x17;
    TIMER0_CTL_R |= 0x0C;
    TIMER0_CTL_R |= 1;
}
//fin programación del timer


//Función que mide la distancia entre el sensor y el objeto
uint32_t medir_distancia (void) {

    uint32_t distancia, highEdge, lowEdge;

    /*
     * Se manda un pulso de 10 microsegundos a la entrada del trigger
     */
    GPIO_PORTA_DATA_R &= ~(1<<4);
    delay_microseconds(10);
    GPIO_PORTA_DATA_R |= (1<<4);
    delay_microseconds(10);
    GPIO_PORTA_DATA_R &= ~(1<<4);


     // se captura el último flanco de subida de la señal emitida

       TIMER0_ICR_R = 4;
       while((TIMER0_RIS_R & 4) == 0);
       highEdge =  TIMER0_TAR_R;


       // se captura el primer flanco en ser recibido por el ultrasonido

       TIMER0_ICR_R =4;
       while((TIMER0_RIS_R & 4) == 0);
       lowEdge = TIMER0_TAR_R;


       // se calcula el tiempo entre que se mandó la señal y el que se demoró en recibirla
       distancia = lowEdge -highEdge;

       //se usa una fórmula para calcular la distancia real en centímetros entre el pbjeto y el sensor
       distancia = ((double) 5882 *(double)distancia)/(2*16000000);

      return distancia;
}
//Fin de función


/*Fución de prueba
 *
void main(void){

    uint32_t distancia;

    SYSCTL_RCGCGPIO_R |= ((1<<0)|(1<<5));
    GPIO_PORTA_DIR_R |=(1<<4);
    GPIO_PORTF_DIR_R |= (1<<2);
    GPIO_PORTA_DEN_R |=(1<<6)|(1<<4);
    GPIO_PORTF_DEN_R|= (1<<2);
    GPIO_PORTF_DR8R_R|= (1<<2);

    Timer0_Init();

    while(1){
    distancia = medir_distancia();
    if(distancia < 7){
    GPIO_PORTF_DATA_R |= (1<<2);
    }
    else{
    GPIO_PORTF_DATA_R &= ~(1<<2);
    }
    delay_microseconds(100);
  }
}

*/
