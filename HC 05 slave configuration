/*
VCC->3.3V
GND->GND
PE4-> TX EN HC05
PE5-> RX EN HC05
*/

#include <stdint.h>
#include "tm4c123gh6pm.h"

//***************CONFIGURAR UART5********************//
void ConfiguraUART_HC05(void){

    SYSCTL_RCGCUART_R |= (1<<5);// Habilitamos UART5
    while ((SYSCTL_PRUART_R & (1<<5)) == 0);
    SYSCTL_RCGC2_R |= ((1<<4)|(1<<5));  // Habilitamos GPIOE
    while ((SYSCTL_PRGPIO_R & 0x30) == 0);

    UART5_CTL_R &= ~(1<<0);// Inhabilitamos el UART5
    GPIO_PORTE_AMSEL_R &= ~(0x30);// Desactivamos modo analógico en PE4 y PE5
    GPIO_PORTE_AFSEL_R |= 0x30;// Activamos funciones alternas en PE4 y PE5
    GPIO_PORTE_DIR_R |= (1<<5);
    GPIO_PORTE_DIR_R &= ~(1<<4);
    GPIO_PORTE_PCTL_R = (GPIO_PORTE_PCTL_R & 0xFF00FFFF)|0x00110000; // Conectamos UART5 a PE4 y PE5
    GPIO_PORTE_DEN_R |= 0x30;// Activamos funciones digitales en PE4 y PE5

    //Configuramos a 9600 8 N 1 la velocidad de comunicación
    UART5_IBRD_R = (UART5_IBRD_R & ~0xFF) + 104;
    UART5_FBRD_R = (UART5_FBRD_R & ~0xFF) + 10;
    // 8, N, 1, FIFOs habilitados
    UART5_LCRH_R = (UART5_LCRH_R & ~0xFF)|0x70;
    UART5_CTL_R |= 0x301;  // Habilitamos el UART1
}

void txcar_uart_HC05(uint32_t car){ //Transimir un caracter por uart5
    while ((UART5_FR_R & UART_FR_TXFF)!=0); //Espera que esté disponible para transmision
    UART5_DR_R = car;//enviar caracter
}

uint8_t rxcar_uart_HC05(void){//recepcion de un caracter
    uint8_t temp;
    while ((UART5_FR_R & UART_FR_RXFE)!=0); // Se espera que llegue un dato
    temp = UART5_DR_R&0xFF; // Se toman solo 8 bits
    return temp; // se retorna valor al ser llamada la funcion
}

//*************FIN CONFIGURAR UART5********************//


